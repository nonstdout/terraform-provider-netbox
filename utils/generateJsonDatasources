#!/bin/bash

SCRIPT_PATH=$(dirname "$0")
FILE="${SCRIPT_PATH}/netbox_list_endpoints.txt"

find ${SCRIPT_PATH}/../vendor/github.com/nonstdout/go-netbox/v3/netbox/client -mindepth 1 -name "*_list_parameters.go" | while read line; do
  OPERATION_ID=0
  EXCLUDE=0

  FILENAME="${line##*/}"
  FILENAME="$(echo ${FILENAME%.go})"

  for i in 2 3 4 5 6; do
    OPERATION_FOUND=0
    OPERATION="$(echo ${FILENAME} | cut -d"_" -f$i)"
    if [ "${OPERATION}" == "list" ]; then
      OPERATION_FOUND=1
    fi

    if [ ${OPERATION_FOUND} -eq 1 -a ${OPERATION_ID} -eq 0 ]; then
      OPERATION_ID=$i
    fi
  done

  if [ ${OPERATION_ID} -eq 3 ]; then
    ENDPOINT="$(echo ${FILENAME} | cut -d"_" -f1)_$(echo ${FILENAME} | cut -d"_" -f2)"
    ITEM=$(echo ${FILENAME} | cut -d"_" -f2)
    ITEM=${ITEM^}
  elif [ ${OPERATION_ID} -eq 4 ]; then
    ENDPOINT="$(echo ${FILENAME} | cut -d"_" -f1)_$(echo ${FILENAME} | cut -d"_" -f2)_$(echo ${FILENAME} | cut -d"_" -f3)"
    ITEM1=$(echo ${FILENAME} | cut -d"_" -f2)
    ITEM2=$(echo ${FILENAME} | cut -d"_" -f3)
    ITEM="${ITEM1^}${ITEM2^}"
  elif [ ${OPERATION_ID} -eq 5 ]; then
    ENDPOINT="$(echo ${FILENAME} | cut -d"_" -f1)_$(echo ${FILENAME} | cut -d"_" -f2)_$(echo ${FILENAME} | cut -d"_" -f3)_$(echo ${FILENAME} | cut -d"_" -f4)"
    ITEM1=$(echo ${FILENAME} | cut -d"_" -f2)
    ITEM2=$(echo ${FILENAME} | cut -d"_" -f3)
    ITEM3=$(echo ${FILENAME} | cut -d"_" -f4)
    ITEM="${ITEM1^}${ITEM2^}${ITEM3^}"
  elif [ ${OPERATION_ID} -eq 6 ]; then
    ENDPOINT="$(echo ${FILENAME} | cut -d"_" -f1)_$(echo ${FILENAME} | cut -d"_" -f2)_$(echo ${FILENAME} | cut -d"_" -f3)_$(echo ${FILENAME} | cut -d"_" -f4)_$(echo ${FILENAME} | cut -d"_" -f5)"
    ITEM1=$(echo ${FILENAME} | cut -d"_" -f2)
    ITEM2=$(echo ${FILENAME} | cut -d"_" -f3)
    ITEM3=$(echo ${FILENAME} | cut -d"_" -f4)
    ITEM4=$(echo ${FILENAME} | cut -d"_" -f5)
    ITEM="${ITEM1^}${ITEM2^}${ITEM3^}${ITEM4^}"
  fi

  SECTION=$(echo ${FILENAME} | cut -d"_" -f1)
  SECTION=${SECTION^}

  if [ ${OPERATION_ID} -eq 2 ]; then
    EXCLUDE=1
  fi

  LIMIT=$(grep -ci "Limit *int64" "${line}")
  if [ $LIMIT -eq 0 ]; then
    EXCLUDE=1
  fi

  ITEM=$(echo ${ITEM} | sed 's/IpAddresses/IPAddresses/g')
  ITEM=$(echo ${ITEM} | sed 's/IpRanges/IPRanges/g')

  if [ ${EXCLUDE} -eq 0 ]; then
    echo ${ENDPOINT} ${SECTION} ${ITEM} >> ${FILE}.tmp
  fi
done

cat ${FILE}.tmp | sort -u > ${FILE}
rm ${FILE}.tmp

find ${SCRIPT_PATH}/../netbox/json/ -name "*_json_*.go" -delete
rm -rf ${SCRIPT_PATH}/../examples/data-sources/netbox_json_*

rm -f ${SCRIPT_PATH}/provider_update.txt
while read -r line; do
        SPLIT=( $line )

        ENDPOINT=${SPLIT[0]}
        SECTION=${SPLIT[1]}
        ITEM=${SPLIT[2]}

cat << EOF > ${SCRIPT_PATH}/../netbox/json/data_netbox_json_${ENDPOINT}_list.go
// Code generated by util/generateJsonDatasources; DO NOT EDIT.
package json

import (
	"context"
	"encoding/json"
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	netboxclient "github.com/nonstdout/go-netbox/v3/netbox/client"
	"github.com/nonstdout/go-netbox/v3/netbox/client/${SECTION,}"
	"github.com/nonstdout/terraform-provider-netbox/v7/netbox/internal/util"
)

// This file was generated by the util/generateJsonDatasources.
// Editing this file might prove futile when you re-run the util/generateJsonDatasources command

func DataNetboxJSON${SECTION}${ITEM}List() *schema.Resource {
	return &schema.Resource{
		Description: "Get json output from the ${ENDPOINT}_list Netbox endpoint.",
		ReadContext: dataNetboxJSON${SECTION}${ITEM}ListRead,

		Schema: map[string]*schema.Schema{
			"filter": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "Filter the records returned by the query.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Name of the field to use for filtering.",
						},
						"value": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Value of the field to use for filtering.",
						},
					},
				},
			},
			"limit": {
				Type:        schema.TypeInt,
				Optional:    true,
				Default:     0,
				Description: "The max number of returned results. If 0 is specified, all records will be returned.",
			},
			"json": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "JSON output of the list of objects for this Netbox endpoint.",
			},
		},
	}
}

func dataNetboxJSON${SECTION}${ITEM}ListRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	client := m.(*netboxclient.NetBoxAPI)

	params := ${SECTION,}.New${SECTION}${ITEM}ListParams()
	limit := int64(d.Get("limit").(int))
	params.Limit = &limit

	if filter, ok := d.GetOk("filter"); ok {
		var filterParams = filter.(*schema.Set)
		for _, f := range filterParams.List() {
			k := f.(map[string]interface{})["name"]
			v := f.(map[string]interface{})["value"]
			kString := k.(string)
			vString := v.(string)
			field := reflect.ValueOf(params).Elem().FieldByName(util.FieldNameToStructName(kString))
			if field != (reflect.Value{}) {
				field.Set(reflect.ValueOf(&vString))
			} else {
				return diag.Errorf("Field %s does not exist in schema.", kString)
			}
		}
	}

	list, err := client.${SECTION}.${SECTION}${ITEM}List(params, nil)
	if err != nil {
		return diag.FromErr(err)
	}

	tmp := list.Payload.Results
	resultLength := int64(len(tmp))
	desiredLength := *list.Payload.Count
	if limit > 0 && limit < desiredLength {
		desiredLength = limit
	}
	if limit == 0 || resultLength < desiredLength {
		limit = resultLength
	}
	offset := limit
	params.Offset = &offset
	for int64(len(tmp)) < desiredLength {
		offset = int64(len(tmp))
		if limit > desiredLength-offset {
			limit = desiredLength - offset
		}
		list, err = client.${SECTION}.${SECTION}${ITEM}List(params, nil)
		if err != nil {
			return diag.FromErr(err)
		}
		tmp = append(tmp, list.Payload.Results...)
	}

	j, _ := json.Marshal(tmp)

	if err = d.Set("json", string(j)); err != nil {
		return diag.FromErr(err)
	}
	d.SetId("NetboxJSON${SECTION}${ITEM}List")

	return nil
}
EOF

cat << EOF >> ${SCRIPT_PATH}/provider_update.txt
"netbox_json_${ENDPOINT}_list": json.DataNetboxJSON${SECTION}${ITEM}List(),
EOF

mkdir -p ${SCRIPT_PATH}/../examples/data-sources/netbox_json_${ENDPOINT}_list

cat << EOF > ${SCRIPT_PATH}/../examples/data-sources/netbox_json_${ENDPOINT}_list/data-source.tf
data "netbox_json_${ENDPOINT}_list" "test" {
  limit = 0
}

output "example" {
  value = jsondecode(data.netbox_json_${ENDPOINT}_list.test.json)
}
EOF

done < "$FILE"

grep -v "netbox_json_" ${SCRIPT_PATH}/../netbox/provider.go > ${SCRIPT_PATH}/../netbox/provider.go.tmp
sed -Ei 's/DataSourcesMap: map\[string\]\*schema.Resource\{/DataSourcesMap: map\[string\]\*schema.Resource\{\nDATAJSON/g' ${SCRIPT_PATH}/../netbox/provider.go.tmp
while read line; do
  sed -i "s/DATAJSON/$line\nDATAJSON/g" ${SCRIPT_PATH}/../netbox/provider.go.tmp
done < ${SCRIPT_PATH}/provider_update.txt
sed -i '/^DATAJSON$/d' ${SCRIPT_PATH}/../netbox/provider.go.tmp
mv ${SCRIPT_PATH}/../netbox/provider.go.tmp ${SCRIPT_PATH}/../netbox/provider.go
go fmt ${SCRIPT_PATH}/../netbox/provider.go > /dev/null
rm -f ${SCRIPT_PATH}/provider_update.txt
rm -f ${SCRIPT_PATH}/netbox_list_endpoints.txt
